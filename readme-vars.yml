---

# project information
project_name: boinc
project_url: "https://boinc.berkeley.edu/"
project_logo: "https://raw.githubusercontent.com/BOINC/boinc/master/doc/logo/boinc_logo_black.jpg"
project_blurb: "[BOINC]({{ project_url }}) is a platform for high-throughput computing on a large scale (thousands or millions of computers). It can be used for volunteer computing (using consumer devices) or grid computing (using organizational resources). It supports virtualized, parallel, and GPU-based applications."
project_lsio_github_repo_url: "https://github.com/linuxserver/docker-{{ project_name }}"
project_categories: "Science"
project_blurb_optional_extras_enabled: false

# supported architectures
available_architectures:
  - { arch: "{{ arch_x86_64 }}", tag: "latest"}
  - { arch: "{{ arch_arm64 }}", tag: "arm64v8-latest"}

# development version
development_versions: false

# container parameters
common_param_env_vars_enabled: true
param_container_name: "{{ project_name }}"
param_usage_include_net: false
param_usage_include_env: true
param_env_vars:
  - { env_var: "TZ", env_value: "Europe/London", desc: "Specify a timezone to use EG Europe/London." }
param_usage_include_vols: true
param_volumes:
  - { vol_path: "/config", vol_host_path: "/path/to/data", desc: "Where BOINC should store its database and config." }
param_usage_include_ports: true
param_ports:
  - { external_port: "8080", internal_port: "8080", port_desc: "Boinc desktop gui." }
  - { external_port: "8181", internal_port: "8181", port_desc: "Boinc desktop gui HTTPS." }
param_device_map: false
cap_add_param: false
cap_add_param_vars: ''

# optional container parameters
opt_param_usage_include_env: true
opt_param_env_vars:
  - { env_var: "PASSWORD", env_value: "", desc: "Optionally set a password for the gui." }
opt_param_usage_include_vols: false
opt_param_usage_include_ports: false
opt_param_device_map: true
opt_param_devices:
  - { device_path: "/dev/dri", device_host_path: "/dev/dri", desc: "Only needed if you want to use your Intel GPU (vaapi)." }
opt_cap_add_param: false
optional_block_1: false
opt_security_opt_param: true
opt_security_opt_param_vars:
  - { run_var: "seccomp=unconfined", compose_var: "seccomp:unconfined", desc: "For Docker Engine only, many modern gui apps need this to function as syscalls are unkown to Docker." }

# application setup block
app_setup_block_enabled: true
app_setup_block: |
  This image sets up the BOINC client and manager and makes its interface available via Guacamole server in the browser. The interface is available at `http://your-ip:8080` or `https://your-ip:8181`.

  By default, there is no password set for the main gui. Optional environment variable `PASSWORD` will allow setting a password for the user `abc`.
  
  It is recommended to switch to `Advanced View` in the top menu, because the `Computing Preferences` don't seem to be displayed in `Simple View`.
  
  Sometimes, the pop-up windows may open in a tiny box in the upper left corner of the screen. When that happens, you can find the corner and resize them.

  ## GPU Hardware Acceleration
  
  ### Intel
  
  Hardware acceleration users for Intel Quicksync will need to mount their /dev/dri video device inside of the container by passing the following command when running or creating the container:
  ```--device=/dev/dri:/dev/dri```
  We will automatically ensure the abc user inside of the container has the proper permissions to access this device.
  
  ### Nvidia
  
  Hardware acceleration users for Nvidia will need to install the container runtime provided by Nvidia on their host, instructions can be found here:
  https://github.com/NVIDIA/nvidia-docker
  We automatically add the necessary environment variable that will utilise all the features available on a GPU on the host. Once nvidia-docker is installed on your host you will need to re/create the docker container with the nvidia container runtime `--runtime=nvidia` and add an environment variable `-e NVIDIA_VISIBLE_DEVICES=all` (can also be set to a specific gpu's UUID, this can be discovered by running `nvidia-smi --query-gpu=gpu_name,gpu_uuid --format=csv` ). NVIDIA automatically mounts the GPU and drivers from your host into the BOINC docker container.

  ### Options in all KasmVNC based GUI containers

  This container is based on [Docker Baseimage KasmVNC](https://github.com/linuxserver/docker-baseimage-kasmvnc) which means there are additional environment variables and run configurations to enable or disable specific functionality.

  #### Optional environment variables

  | Variable | Description |
  | :----: | --- |
  | CUSTOM_PORT | Internal port the container listens on for http if it needs to be swapped from the default 8080. |
  | CUSTOM_HTTPS_PORT | Internal port the container listens on for https if it needs to be swapped from the default 8181. |
  | CUSTOM_USER | HTTP Basic auth username, abc is default. |
  | PASSWORD | HTTP Basic auth password, abc is default. If unset there will be no auth |
  | SUBFOLDER | Subfolder for the application if running a subfolder reverse proxy, need both slashes IE `/subfolder/` |
  | TITLE | The page title displayed on the web browser, default "KasmVNC Client". |
  | FM_HOME | This is the home directory (landing) for the file manager, default "/config". |
  | START_DOCKER | If set to false a container with privilege will not automatically start the DinD Docker setup. |
  | DRINODE | If mounting in /dev/dri for [DRI3 GPU Acceleration](https://www.kasmweb.com/kasmvnc/docs/master/gpu_acceleration.html) allows you to specify the device to use IE `/dev/dri/renderD128` |

  #### Optional run configurations

  | Variable | Description |
  | :----: | --- |
  | `--privileged` | Will start a Docker in Docker (DinD) setup inside the container to use docker in an isolated environment. For increased performance mount the Docker directory inside the container to the host IE `-v /home/user/docker-data:/var/lib/docker`. |
  | `-v /var/run/docker.sock:/var/run/docker.sock` | Mount in the host level Docker socket to either interact with it via CLI or use Docker enabled applications. |
  | `--device /dev/dri:/dev/dri` | Mount a GPU into the container, this can be used in conjunction with the `DRINODE` environment variable to leverage a host video card for GPU accelerated appplications. Only **Open Source** drivers are supported IE (Intel,AMDGPU,Radeon,ATI,Nouveau) |

  ### Lossless mode

  This container is capable of delivering a true lossless image at a high framerate to your web browser by changing the Stream Quality preset to "Lossless", more information [here](https://www.kasmweb.com/docs/latest/how_to/lossless.html#technical-background). In order to use this mode from a non localhost endpoint the HTTPS port on 8181 needs to be used. If using a reverse proxy to port 8080 specific headers will need to be set as outlined [here](https://github.com/linuxserver/docker-baseimage-kasmvnc#lossless).
# changelog
changelogs:
  - { date: "03.04.23:", desc: "Rebase to KasmVNC base image. Deprecate armhf build as the new base does not support it. Add bzip2 and xz-utils." }
  - { date: "14.11.22:", desc: "Fix opencl driver." }
  - { date: "18.09.22:", desc: "Rebase to jammy." }
  - { date: "24.02.22:", desc: "Rebase to focal." }
  - { date: "31.01.22:", desc: "Improve device permissions setting verbosity." }
  - { date: "23.03.21:", desc: "Rebase to rdesktop-web baseimage. Deprecate `GUAC_USER` and `GUAC_PASS` env vars. Existing users can set the new var `PASSWORD` for the user `abc`." }
  - { date: "01.04.20:", desc: "Install boinc from ppa." }
  - { date: "17.03.20:", desc: "Add armhf and aarch64 builds and switch to multi-arch image." }
  - { date: "16.03.20:", desc: "Clean up old pid files." }
  - { date: "15.03.20:", desc: "Initial release." }
